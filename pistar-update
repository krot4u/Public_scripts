#!/bin/bash
#
###############################################################################
#                                                                             #
#                        Pi-Star Auto Update Tool                             #
#                                                                             #
#    Version 3.5, Code, Design and Development by Andy Taylor (MW0MWZ).       #
#                                                                             #
#                     Make it simple to update the OS.                        #
#                                                                             #
###############################################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

exec 200>/var/lock/pistar-update.lock || exit 1
if ! flock -n 200 ; then
  echo -e "Another instance is already running...\n"
  exit 1
fi

git_checkUpdateRequired() {
	# Set the function variables
	gitFolder=${1}
	gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)

	# Git check / update function
	gitStatusRemote=$(git ls-remote --heads ${gitRemoteURL} | grep master | cut -c 1-7)
	gitStatusLocal=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git log --pretty=format:"%h" -1)

	# Return the output
	if [[ ${gitStatusRemote} != ${gitStatusLocal} ]]; then
		echo "1"
	else
		echo "0"
	fi
}

git_update() {
	# Set the function variables
	gitFolder=${1}

	# Handle the special case for /usr/loca/sbin
	if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
		# Assume unchanged for pistar-upnp.service
		git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git update-index --assume-unchanged pistar-upnp.service
	fi

	if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
		echo "Updating ${gitFolder}..."
		# If this script is updated, re-run the update with the new version.
		if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
      git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git fetch
			if [ "$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git diff --name-only origin/master 2>/dev/null | grep pistar-update 2>/dev/null)" = "pistar-update" ]; then
        echo "Found a new version of pistar-update..."
        git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull origin master
        if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
          echo "Update to new version of pistar-update was not successfull, forcing update..."
					rm -rf ${gitFolder}/pistar-upnp.service
          git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
        fi
          echo "Restarting update process with the new version..."
          exec "$0" "$@"
          exit 1
      fi
  fi
  git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull origin master

		# Re-check that the updates are now good
		if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
			if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
				rm -rf ${gitFolder}/pistar-upnp.service
			fi
			echo "Updates were not successfull, reverting to Pi-Star original files..."
			git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
		fi
	else
		echo "No updates for ${gitFolder} available"
	fi
}

service_handle() {
	# What do we want do to?
	doWhat=${1}

	systemctl ${doWhat} pistar-watchdog.service > /dev/null
	systemctl ${doWhat} pistar-remote.service > /dev/null
	systemctl ${doWhat} dmrgateway.service > /dev/null
	systemctl ${doWhat} dapnetgateway.service > /dev/null
	systemctl stop ircddbgateway.service > /dev/null; systemctl disable ircddbgateway.service > /dev/null; systemctl stop ircddbgateway.timer > /dev/null; systemctl disable ircddbgateway.timer > /dev/null
  systemctl stop timeserver.service > /dev/null; systemctl disable timeserver.service > /dev/null; systemctl stop timeserver.timer > /dev/null; systemctl disable timeserver.timer > /dev/null;
	systemctl stop ysfgateway.service > /dev/null; systemctl disable ysfgateway.service > /dev/null; systemctl stop ysfgateway.timer > /dev/null; systemctl disable ysfgateway.timer > /dev/null
	systemctl stop ysf2dmr.service > /dev/null; systemctl disable ysf2dmr.service > /dev/null; systemctl stop ysf2dmr.timer > /dev/null; systemctl disable ysf2dmr.timer > /dev/null
	systemctl stop ysf2nxdn.service > /dev/null; systemctl disable ysf2nxdn.service > /dev/null; systemctl stop ysf2nxdn.timer > /dev/null; systemctl disable ysf2nxdn.timer > /dev/null
	systemctl stop ysf2p25.service > /dev/null; systemctl disable ysf2p25.service > /dev/null; systemctl stop ysf2p25.timer > /dev/null; systemctl disable ysf2p25.timer > /dev/null
	systemctl stop ysfparrot.service > /dev/null; systemctl disable ysfparrot.service > /dev/null; systemctl stop ysfparrot.timer > /dev/null; systemctl disable ysfparrot.timer > /dev/null
	systemctl stop dmr2ysf.service > /dev/null; systemctl disable dmr2ysf.service > /dev/null; systemctl stop dmr2ysf.timer > /dev/null; systemctl disable dmr2ysf.timer > /dev/null
	systemctl stop dmr2nxdn.service > /dev/null; systemctl disable dmr2nxdn.service > /dev/null; systemctl stop dmr2nxdn.timer > /dev/nul; systemctl disable dmr2nxdn.timer > /dev/null
  systemctl stop p25gateway.service > /dev/null; systemctl disable p25gateway.service > /dev/null; systemctl stop p25gateway.timer > /dev/nul; systemctl disable p25gateway.timer > /dev/null
  systemctl stop p25parrot.service > /dev/null; systemctl disable p25parrot.service > /dev/null; systemctl stop p25parrot.timer > /dev/nul; systemctl disable p25parrot.timer > /dev/null
	systemctl stop nxdngateway.service > /dev/null; systemctl disable nxdngateway.service > /dev/null; systemctl stop nxdngateway.timer > /dev/null; systemctl disable nxdngateway.timer > /dev/null
	systemctl stop nxdn2dmr.service > /dev/null; systemctl disable nxdn2dmr.service > /dev/null
	systemctl stop nxdnparrot.service > /dev/null; systemctl disable nxdnparrot.service > /dev/null; systemctl disable nxdnparrot.service > /dev/null
	systemctl stop dstarrepeater.service > /dev/null; systemctl disable dstarrepeater.service > /dev/null; systemctl disable dstarrepeater.service > /dev/null
	systemctl ${doWhat} mmdvmhost.service 2> /dev/null && sleep 2 > /dev/null
}

main_function() {
	# Make the disk writable
	mount -o remount,rw /
	mount -o remount,rw /boot

	if [ -t 1 ]; then
		# This is running from a terminal, so it should be safe to update the OS
		echo -e "Updating OS...\n"
		apt-get update -y
		apt-get upgrade --fix-missing --fix-broken -y
		apt-get clean
		echo "Done"

		echo "Checking nginx config"
		if ! [ $(cat /lib/systemd/system/nginx.service | grep -o "mkdir") ]; then
			sed -i '\/PIDFile=\/run\/nginx.pid/a ExecStartPre=\/bin\/mkdir -p \/var\/log\/nginx' /lib/systemd/system/nginx.service
			systemctl daemon-reload
			systemctl restart nginx.service
			echo "nginx config has been repaired - re-running pistar-update"
      exec "$0" "$@"
			exit 1
		fi
	fi

	echo "Stopping Services..."
	service_handle stop
	echo "Done"

	echo "Updating DV Binaries..."
	git_update /usr/local/bin
	echo "Done"

	# echo "Updating Pi-Star Binaries..."
	# git_update /usr/local/sbin
	# echo "Done"

	echo "Updating Hostfiles..."
  curl --fail -s https://raw.githubusercontent.com/krot4u/Public_scripts/master/HostFilesUpdate.sh > '/usr/local/sbin/HostFilesUpdate.sh'
	/usr/local/sbin/HostFilesUpdate.sh > /dev/null 2>&1
	echo "Done"

	# echo "Updating Dashboard..."
	# git_update /var/www/dashboard
	# echo "Done"

	echo "Updating PiStar-Firewall..."
	pistar-firewall > /dev/null 2>&1
	echo "Done"

	# Pre-Fix some config in MMDVMHost for update purposes.
	mmdvmHostVer=`MMDVMHost -v | awk '{print $3}' | cut -c 1-8`
	needsUpdate=`grep -c Gwy /etc/mmdvmhost`
	if [ ${mmdvmHostVer} \> 20171031 ] && [ ${needsUpdate} \> 0 ]; then
    # Config needs to be updated, add in the changes here
    sed -i "/GwyAddress=/c\\GatewayAddress=127.0.0.1" /etc/mmdvmhost
    sed -i "/GwyPort=/c\\GatewayPort=4200" /etc/mmdvmhost
	fi
	needsTypeLine=$(sed -n '/^\[DMR Network\]/,/^\[/p' /etc/mmdvmhost | grep "^Type=" | wc -l)
	dmrAddress=$(sed -n '/^\[DMR Network\]/,/^\[/p' /etc/mmdvmhost | grep "^Address=" | awk -F "=" '/Address=/ {print $2}')
	if [ ${needsTypeLine} \< 1 ]; then
		if [[ "${dmrAddress}" == "127.0.0.1" ]]; then
			sed -i 's/\[DMR Network\]/\[DMR Network\]\nType=Gateway/g' /etc/mmdvmhost
		else
			sed -i 's/\[DMR Network\]/\[DMR Network\]\nType=Direct/g' /etc/mmdvmhost
		fi
	else
		if [[ "${dmrAddress}" == "127.0.0.1" ]]; then
			sed -i "/Type=Dire/c\\Type=Gateway" /etc/mmdvmhost
		else
			sed -i "/Type=Gate/c\\Type=Direct" /etc/mmdvmhost
		fi
	fi

	# Fix up new P25Gateway Config Hostfile setup
	if [[ $(/usr/local/bin/P25Gateway --version | awk '{print $3}' | cut -c -8) -gt "20180108" ]]; then
		sed -i 's/Hosts=\/usr\/local\/etc\/P25Hosts.txt/HostsFile1=\/usr\/local\/etc\/P25Hosts.txt\nHostsFile2=\/usr\/local\/etc\/P25HostsLocal.txt/g' /etc/p25gateway
	fi
	if [ ! -f /root/P25Hosts.txt ]; then
		touch /root/P25Hosts.txt
	fi

	# Fix up new NXDNGateway Config Hostfile setup
	if [[ $(/usr/local/bin/NXDNGateway --version | awk '{print $3}' | cut -c -8) -gt "20180801" ]]; then
		sed -i 's/HostsFile=\/usr\/local\/etc\/NXDNHosts.txt/HostsFile1=\/usr\/local\/etc\/NXDNHosts.txt\nHostsFile2=\/usr\/local\/etc\/NXDNHostsLocal.txt/g' /etc/nxdngateway
	fi
	if [ ! -f /root/NXDNHosts.txt ]; then
		touch /root/NXDNHosts.txt
	fi
	if [ ! -f /usr/local/etc/NXDNHostsLocal.txt ]; then
		touch /usr/local/etc/NXDNHostsLocal.txt
	fi

	# If we are ready to use the new DMRGateway
	if [[ $(/usr/local/bin/DMRGateway --version | awk '{print $3}' | cut -c -8) -gt "20170924" ]] && [[ $(grep -c "\[DMR Network 3\]" /etc/dmrgateway) -eq "1" ]] && [[ ! -f /usr/local/etc/DMR_Audio/no_NO.indx ]]; then
		curl --fail -o /usr/local/etc/DMR_Audio/en_US.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_US.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_US.indx
	fi

	# I previously had the wrong URL for the P25 Audio files; remove the broken downloads.
	if [[ -f /usr/local/etc/P25_Audio/en_GB.imbe ]]; then
		testFileIMBE=`file -i /usr/local/etc/P25_Audio/en_GB.imbe | cut -d " " -f2`
		if [[ $testFileIMBE == text* ]]; then
			rm -rf /usr/local/etc/P25_Audio
		fi
	fi

	# Download the correct P25 Audio Files
	if [[ ! -d /usr/local/etc/P25_Audio ]]; then
		echo "Downloading P25 Voice Files..."
		mkdir /usr/local/etc/P25_Audio
		curl --fail -o /usr/local/etc/P25_Audio/en_US.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_US.imbe
		curl --fail -o /usr/local/etc/P25_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_US.indx
		echo "Done"
	fi

	if [[ $(grep "\[Voice\]" /etc/p25gateway | wc -l) -eq 0 ]]; then
		echo "Updating P25Gateway config..."
		echo "" >> /etc/p25gateway
		sed -i '$a[Voice]\nEnabled=1\nLanguage=en_GB\nDirectory=/usr/local/etc/P25_Audio\n' /etc/p25gateway
		echo "Done"
	fi

  if [[ $(cat /etc/dstarrepeater | grep -o "mmdvmRXInvert" | wc -l) -eq 0 ]]; then
    echo "Adding better MMDVM Config to /etc/dstarrepeater"
    echo "mmdvmRXInvert=0" >> /etc/dstarrepeater
    echo "mmdvmTXInvert=0" >> /etc/dstarrepeater
    echo "mmdvmPTTInvert=0" >> /etc/dstarrepeater
    echo "mmdvmTXDelay=50" >> /etc/dstarrepeater
    echo "mmdvmRXLevel=100" >> /etc/dstarrepeater
    echo "mmdvmTXLevel=100" >> /etc/dstarrepeater
  fi

	echo "Starting Services..."
	service_handle start
	echo "Done"

	echo "Updates complete, syncing disk cache before making the disk Read-Only"
	# Make the disk read-only
	/bin/sync
	/bin/sync
	/bin/sync
	mount -o remount,ro /
	mount -o remount,ro /boot

	# Tell the user we are done
	echo "Finished"
	}

  main_function >> /var/log/pi-star/pi-star_update.log 2>&1

exit 0
